using tripAdvisorAPI.Models;
using Microsoft.EntityFrameworkCore;

namespace tripAdvisorAPI;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    public DbSet<User> Users { get; set; }
    public DbSet<Trip> Trips { get; set; }
    public DbSet<Activity> Activities { get; set; }
    public DbSet<TripActivity> TripActivities { get; set; } // Ajout de l'entit√© pivot

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // üöÄ Relation One-to-Many : User ‚Üí Trips
        modelBuilder.Entity<User>()
            .HasMany(u => u.Trips)
            .WithOne(t => t.User)
            .HasForeignKey(t => t.UserId)
            .OnDelete(DeleteBehavior.Restrict); // ‚ö†Ô∏è Emp√™che la suppression cascade sur User

        // üöÄ Relation Many-to-Many : Trip ‚Üî Activity via TripActivity
        modelBuilder.Entity<TripActivity>()
            .HasKey(ta => new { ta.TripId, ta.ActivityId }); // Cl√© composite

        modelBuilder.Entity<TripActivity>()
            .HasOne(ta => ta.Trip)
            .WithMany(t => t.TripActivities)
            .HasForeignKey(ta => ta.TripId)
            .OnDelete(DeleteBehavior.Cascade); // ‚ö†Ô∏è Si un Trip est supprim√©, ses relations le sont aussi

        modelBuilder.Entity<TripActivity>()
            .HasOne(ta => ta.Activity)
            .WithMany(a => a.TripActivities)
            .HasForeignKey(ta => ta.ActivityId)
            .OnDelete(DeleteBehavior.Cascade); // ‚ö†Ô∏è Si une Activity est supprim√©e, ses relations aussi
    }
}
